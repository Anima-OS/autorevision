#!/bin/bash

# Copyright (c) 2012 dak180
# See http://opensource.org/licenses/bsd-license.php for licence terms
#
# autorevision - extracts metadata about the head version of your repository.

# Usage message.
function arUsage {
	cat > "/dev/stderr" << EOF
usage: ./autorevision {-t output-type | -s symbol} [-o cache-file] [-V]
	Options include:
	-t output-type		= specify output type
	-s symbol		= specify symbol output
	-o cache-file		= specify cache file location
	-V			= emit version and exit
	-?			= help message

The folowing are valid output types:
	h			= Header for use with c/c++
	xcode			= Header useful for populating info.plist files
	sh			= Bash sytax
	py			= Python file
	pl			= Perl file
	lua			= Lua file
	php			= PHP file
	ini			= INI file
	js			= javascript file

The following are valid symbols:
	VCS_TYPE
	VCS_BASENAME
	VCS_NUM
	VCS_DATE
	VCS_BRANCH
	VCS_TAG
	VCS_FULL_HASH
	VCS_SHORT_HASH
	VCS_WC_MODIFIED
EOF
	exit 1
}

# Config
ARVERSION="1.0"
TARGETFILE="/dev/stdout"
while getopts ":t:o:s:V" OPTION; do
	case "${OPTION}" in
		t)
			AFILETYPE="${OPTARG}"
		;;
		o)
			CACHEFILE="${OPTARG}"
		;;
		s)
			VAROUT="${OPTARG}"
		;;
		V)
			echo "autorevision ${ARVERSION}"
			exit 0
		;;
		?)
			# If an unknown flag is used (or -?):
			arUsage
		;;
	esac
done

if [[ ! -z "${VAROUT}"  ]] && [[ ! -z "${AFILETYPE}" ]]; then
	# If both -s and -t are specified:
	echo "error: Improper argument combination." 1>&2
	exit 1
elif [[ -z "${VAROUT}"  ]] && [[ -z "${AFILETYPE}" ]]; then
	# If neither -s or -t are specified:
	arUsage
fi


# Functions to extract data from different repo types.
# For git repos
function gitRepo {
	cd "$(git rev-parse --show-toplevel)"

	VCS_TYPE="git"

	VCS_BASENAME="$(basename "${PWD}")"

	# Is the working copy clean?
	git diff --quiet HEAD &> /dev/null
	WC_MODIFIED="${?}"

	# Enumeration of changesets
	VCS_NUM="$(git rev-list --count HEAD)"
	if [ -z "${VCS_NUM}" ]; then
		echo "warning: Counting the number of revisions may be slower due to an outdated git version less than 1.7.2.3. If something breaks, please update it." 1>&2
		VCS_NUM="$(git rev-list HEAD | wc -l)"
	fi

	# The full revision hash
	VCS_FULL_HASH="$(git rev-parse HEAD)"

	# The short hash
	VCS_SHORT_HASH="$(echo "${VCS_FULL_HASH}" | cut -b 1-7)"

	# Current branch
	VCS_BRANCH="$(git branch | sed -n -e '/^* /s:::p')"

	# Current tag (exact matches only)
	VCS_TAG="$(git describe --exact-match --tags)"

	# Date of the current commit
	VCS_DATE="$(git log -1 --pretty=format:%ci | sed -e 's: :T:' | sed -e 's: ::')"
}

# For hg repos
function hgRepo {
	cd "$(hg root)"

	VCS_TYPE="hg"

	VCS_BASENAME="$(basename "${PWD}")"

	# Is the working copy clean?
	hg sum | grep -q 'commit: (clean)'
	WC_MODIFIED="${?}"

	# Enumeration of changesets
	VCS_NUM="$(hg id -n | tr -d '+')"

	# The full revision hash
	VCS_FULL_HASH="$(hg log -r "${VCS_NUM}" -l 1 --template '{node}\n')"

	# The short hash
	VCS_SHORT_HASH="$(hg id -i | tr -d '+')"

	# Current branch
	VCS_BRANCH="$(hg id -b)"

	# Current tag (exact matches only)
	if [ "$(hg log -r "${VCS_NUM}" -l 1 --template '{latesttagdistance}\n')" = "0" ]; then
		VCS_TAG="$(hg id -t | sed -e 's:qtip::' -e 's:tip::' -e 's:qbase::' -e 's:qparent::' -e "s:$(hg --color never qtop)::" | cut -d ' ' -f 1)"
	fi

	# Date of the current commit
	VCS_DATE="$(hg log -r "${VCS_NUM}" -l 1 --template '{date|isodatesec}\n'   | sed -e 's: :T:' | sed -e 's: ::')"
}

# For svn repos
function svnRepo {
	VCS_TYPE="svn"

	case "${PWD}" in
	/*trunk*|/*branches*|/*tags*)
		fn="${PWD}"
		while [[ "$(basename "${fn}")" != 'trunk' ]] && [[ "$(basename "${fn}")" != 'branches' ]] && [[ "$(basename "${fn}")" != 'tags' ]] && [[ "$(basename "${fn}")" != '/' ]]
		do
			fn="$(dirname "${fn}")"
		done
		fn="$(dirname "${fn}")"
		if [ "${fn}" == '/' ]
		then
			VCS_BASENAME="$(basename "${PWD}")"
		else
			VCS_BASENAME="$(basename "${fn}")"
		fi
		;;
	*) VCS_BASENAME="$(basename "${PWD}")" ;;
	esac

	# Cache svnversion output
	SVNVERSION="$(svnversion)"

	# Is the working copy clean?
    echo "${SVNVERSION}" | grep -vq "M"
	WC_MODIFIED="${?}"

	# Enumeration of changesets
	VCS_NUM="$(echo "${SVNVERSION}" | cut -d : -f 1 | sed -e 's:M::' -e 's:S::' -e 's:P::')"

	# The full revision hash
	VCS_FULL_HASH="${SVNVERSION}"

	# The short hash
	VCS_SHORT_HASH="$VCS_NUM"

	# Current branch 
	case "${PWD}" in
	/*trunk*|/*branches*|/*tags*)
		lastbase=""
		fn="${PWD}"
		while :
		do
		    base="$(basename "${fn}")"
		    if [[ "$base" = 'trunk' ]]
		    then
			VCS_BRANCH='trunk'
			break
		    elif [[ "$base" = 'branches' ]] || [[ "$base" = 'tags' ]]
		    then
			VCS_BRANCH="${lastbase}"
			break
		    elif [[ "$base" = '/' ]]
		    then
			VCS_BRANCH=""
			break
		    fi
		    lastbase="$base"
		    fn="$(dirname "${fn}")"
		done
		;;
	*) VCS_BRANCH="" ;;
	esac

	# Current tag (exact matches only). But "current tag" can't
	# be extracted reliably because Subversion doesn't have tags the way
	# other VCSes do.
	VCS_TAG=""

	# Date of the current commit
	VCS_DATE="$(svn info | sed -n -e 's:Last Changed Date\: ::p' | sed 's: (.*)::' | sed -e 's: :T:' | sed -e 's: ::')"
}


# Functions to output data in different formats.
# For header output
function hOutput {
	case "${WC_MODIFIED}" in
	1) WC_MODIFIED='true' ;;
	0) WC_MODIFIED='false' ;;
	esac
	cat > "${TARGETFILE}" << EOF
/* Generated by autorevision - do not hand-hack! */
#ifndef AUTOREVISION_H
#define AUTOREVISION_H

#define VCS_TYPE		"${VCS_TYPE}"
#define VCS_BASENAME	"${VCS_BASENAME}"
#define VCS_NUM			${VCS_NUM}
#define VCS_DATE		"${VCS_DATE}"
#define VCS_BRANCH		"${VCS_BRANCH}"
#define VCS_TAG			"${VCS_TAG}"

#define VCS_FULL_HASH		"${VCS_FULL_HASH}"
#define VCS_SHORT_HASH		"${VCS_SHORT_HASH}"

#define VCS_WC_MODIFIED		${WC_MODIFIED}

#endif

/* end */
EOF
}

# A header output for use with xcode to populate info.plist strings
function xcodeOutput {
	cat > "${TARGETFILE}" << EOF
/* Generated by autorevision - do not hand-hack! */
#ifndef AUTOREVISION_H
#define AUTOREVISION_H

#define VCS_TYPE		${VCS_TYPE}
#define VCS_BASENAME	${VCS_BASENAME}
#define VCS_NUM			${VCS_NUM}
#define VCS_DATE		${VCS_DATE}
#define VCS_BRANCH		${VCS_BRANCH}
#define VCS_TAG			${VCS_TAG}

#define VCS_FULL_HASH					${VCS_FULL_HASH}
#define VCS_SHORT_HASH					${VCS_SHORT_HASH}

#define VCS_WC_MODIFIED					${WC_MODIFIED}

#endif

/* end */
EOF
}

# For bash output
function shOutput {
	cat > "${TARGETFILE}" << EOF
# Generated by autorevision - do not hand-hack!

VCS_TYPE="${VCS_TYPE}"
VCS_BASENAME="${VCS_BASENAME}"
VCS_NUM=${VCS_NUM}
VCS_DATE="${VCS_DATE}"
VCS_BRANCH="${VCS_BRANCH}"
VCS_TAG="${VCS_TAG}"

VCS_FULL_HASH="${VCS_FULL_HASH}"
VCS_SHORT_HASH="${VCS_SHORT_HASH}"

VCS_WC_MODIFIED=${WC_MODIFIED}

# end
EOF
}

# For Python output
function pyOutput {
	case "${WC_MODIFIED}" in
	0) WC_MODIFIED="False" ;;
	1) WC_MODIFIED="True" ;;
	esac
	cat > "${TARGETFILE}" << EOF
# Generated by autorevision - do not hand-hack!

VCS_TYPE = "${VCS_TYPE}"
VCS_BASENAME = "${VCS_BASENAME}"
VCS_NUM = ${VCS_NUM}
VCS_DATE = "${VCS_DATE}"
VCS_BRANCH = "${VCS_BRANCH}"
VCS_TAG = "${VCS_TAG}"

VCS_FULL_HASH = "${VCS_FULL_HASH}"
VCS_SHORT_HASH = "${VCS_SHORT_HASH}"

VCS_WC_MODIFIED = ${WC_MODIFIED}

# end
EOF
}

# For Perl output
function plOutput {
	cat << EOF
# Generated by autorevision - do not hand-hack!

\$VCS_TYPE = "${VCS_TYPE}";
\$VCS_BASENAME = "${VCS_BASENAME}"
\$VCS_NUM = ${VCS_NUM};
\$VCS_DATE = "${VCS_DATE}";
\$VCS_BRANCH = "${VCS_BRANCH}";
\$VCS_TAG = "${VCS_TAG}";

\$VCS_FULL_HASH = "${VCS_FULL_HASH}";
\$VCS_SHORT_HASH = "${VCS_SHORT_HASH}";

\$VCS_WC_MODIFIED = ${WC_MODIFIED};

# end
EOF
}

# For lua output
function luaOutput {
	case "${WC_MODIFIED}" in
	0) WC_MODIFIED="false" ;;
	1) WC_MODIFIED="true" ;;
	esac
	cat > "${TARGETFILE}" << EOF
-- Generated by autorevision - do not hand-hack!

VCS_TYPE = "${VCS_TYPE}"
VCS_BASENAME = "${VCS_BASENAME}"
VCS_NUM = ${VCS_NUM}
VCS_DATE = "${VCS_DATE}"
VCS_BRANCH = "${VCS_BRANCH}"
VCS_TAG = "${VCS_TAG}"

VCS_FULL_HASH = "${VCS_FULL_HASH}"
VCS_SHORT_HASH = "${VCS_SHORT_HASH}"

VCS_WC_MODIFIED = ${WC_MODIFIED}

-- end
EOF
}

# For php output
function phpOutput {
	case "${WC_MODIFIED}" in
	0) WC_MODIFIED="false" ;;
	1) WC_MODIFIED="true" ;;
	esac
	cat > "${TARGETFILE}" << EOF
<?php
/*
 * Generated by autorevision - do not hand-hack!
 */

$GLOBALS["VCS_TYPE"] = "${VCS_TYPE}";
$GLOBALS["VCS_BASENAME"] = "${VCS_BASENAME}";
$GLOBALS["VCS_NUM"] = ${VCS_NUM};
$GLOBALS["VCS_DATE"] = "${VCS_DATE}";
$GLOBALS["VCS_BRANCH"] = "${VCS_BRANCH}";
$GLOBALS["VCS_TAG"] = "${VCS_TAG}";

$GLOBALS["VCS_FULL_HASH"] = "${VCS_FULL_HASH}";
$GLOBALS["VCS_SHORT_HASH"] = "${VCS_SHORT_HASH}";

$GLOBALS["VCS_WC_MODIFIED"] = ${WC_MODIFIED};

/*
 * end
 */
?>
EOF
}

# For ini output
function iniOutput {
	case "${WC_MODIFIED}" in
	0) WC_MODIFIED="false" ;;
	1) WC_MODIFIED="true" ;;
	esac
	cat > "${TARGETFILE}" << EOF
; Generated by autorevision - do not hand-hack!
[VCS]
VCS_TYPE = "${VCS_TYPE}"
VCS_BASENAME = "${VCS_BASENAME}"
VCS_NUM = ${VCS_NUM}
VCS_DATE = "${VCS_DATE}"
VCS_BRANCH = "${VCS_BRANCH}"
VCS_TAG = "${VCS_TAG}"
VCS_FULL_HASH = "${VCS_FULL_HASH}"
VCS_SHORT_HASH = "${VCS_SHORT_HASH}"
VCS_WC_MODIFIED = ${WC_MODIFIED}
; end
EOF
}

# For javascript output
function jsOutput {
	case "${WC_MODIFIED}" in
	1) WC_MODIFIED="true" ;;
	0) WC_MODIFIED="false" ;;
	esac
	cat > "${TARGETFILE}" << EOF
/** Generated by autorevision - do not hand-hack! */

var autorevision = {
	VCS_TYPE: "${VCS_TYPE}",
	VCS_BASENAME: "${VCS_BASENAME}",
	VCS_NUM: ${VCS_NUM},
	VCS_DATE: "${VCS_DATE}",
	VCS_BRANCH: "${VCS_BRANCH}",
	VCS_TAG: "${VCS_TAG}",

	VCS_FULL_HASH: "${VCS_FULL_HASH}",
	VCS_SHORT_HASH: "${VCS_SHORT_HASH}",

	VCS_WC_MODIFIED: ${WC_MODIFIED}
};

/** Node.js compatibility */
if (typeof module !== 'undefined') {
	module.exports = autorevision;
}

/** end */
EOF
}


# Detect and collect repo data.
if [[ -d .git ]] && [[ ! -z "$(git rev-parse HEAD)" ]]; then
	gitRepo
elif [[ -d .hg ]] && [[ ! -z "$(hg root)" ]]; then
	hgRepo
elif [[ -d .svn ]] && [[ ! -z "$(svn info)" ]]; then
	svnRepo
elif [[ -f "${CACHEFILE}" ]]; then
	# We are not in a repo; try to use a previously generated cache to populate our symbols.
	source "${CACHEFILE}"
else
	echo "error: No repo or cache detected." 1>&2
	exit 1
fi


# If VCS_TAG is empty, alias it to VCS_BRANCH.
if [ -z "${VCS_TAG}" ]; then
	VCS_TAG="${VCS_BRANCH}"
fi


# -s output is handled here.
if [[ ! -z "${VAROUT}" ]]; then
	if [[ "${VAROUT}" = "VCS_TYPE" ]]; then
		echo "${VCS_TYPE}"
	elif [[ "${VAROUT}" = "VCS_BASENAME" ]]; then
		echo "${VCS_BASENAME}"
	elif [[ "${VAROUT}" = "VCS_NUM" ]]; then
		echo "${VCS_NUM}"
	elif [[ "${VAROUT}" = "VCS_DATE" ]]; then
		echo "${VCS_DATE}"
	elif [[ "${VAROUT}" = "VCS_BRANCH" ]]; then
		echo "${VCS_BRANCH}"
	elif [[ "${VAROUT}" = "VCS_TAG" ]]; then
		echo "${VCS_TAG}"
	elif [[ "${VAROUT}" = "VCS_FULL_HASH" ]]; then
		echo "${VCS_FULL_HASH}"
	elif [[ "${VAROUT}" = "VCS_SHORT_HASH" ]]; then
		echo "${VCS_SHORT_HASH}"
	elif [[ "${VAROUT}" = "VCS_WC_MODIFIED" ]]; then
		echo "${VCS_WC_MODIFIED}"
	fi
fi


# Detect requested output type and use it.
if [[ ! -z "${AFILETYPE}" ]]; then
	if [[ "${AFILETYPE}" = "h" ]]; then
		hOutput
	elif [ "${AFILETYPE}" = "xcode" ]; then
		xcodeOutput
	elif [ "${AFILETYPE}" = "sh" ]; then
		shOutput
	elif [ "${AFILETYPE}" = "py" ]; then
		pyOutput
	elif [ "${AFILETYPE}" = "pl" ]; then
		plOutput
	elif [ "${AFILETYPE}" = "lua" ]; then
		luaOutput
	elif [ "${AFILETYPE}" = "php" ]; then
		phpOutput
	elif [ "${AFILETYPE}" = "ini" ]; then
		iniOutput
	elif [ "${AFILETYPE}" = "js" ]; then
		jsOutput
	else
		echo "error: Not a valid output type." 1>&2
		exit 1
	fi
fi


# If requested, make a cache file.
if [[ ! -z "${CACHEFILE}" ]]; then
	TARGETFILE="${CACHEFILE}"
	shOutput
fi
